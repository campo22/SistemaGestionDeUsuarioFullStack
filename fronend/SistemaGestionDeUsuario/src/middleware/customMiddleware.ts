import { Middleware, isRejectedWithValue } from "@reduxjs/toolkit"; // Importa Middleware y la funci√≥n isRejectedWithValue desde @reduxjs/toolkit
import { logout } from "../features/auth/authSlice"; // Importa la acci√≥n logout desde el slice de autenticaci√≥n

// Define una funci√≥n 'type guard' para verificar si una acci√≥n es un objeto con una propiedad 'type'
// Esto ayuda a TypeScript a inferir el tipo de la acci√≥n m√°s adelante.
function isActionWithType(
  action: unknown // La acci√≥n puede ser de cualquier tipo al principio
): action is { type: string; payload?: any; error?: any } {
  // Retorna true si la acci√≥n coincide con la estructura de un objeto con 'type'
  // Verifica si la acci√≥n es un objeto, no es null y tiene la propiedad 'type'
  return typeof action === "object" && action !== null && "type" in action;
}

// Define el middleware personalizado. Un middleware de Redux tiene la firma (store) => (next) => (action)
export const customMiddleware: Middleware = (store) => (next) => (action) => {
  console.log("Middleware ejecutado", action); // L√≠nea opcional para ver todas las acciones que pasan

  // Verifica si la acci√≥n es v√°lida usando el type guard definido antes
  if (!isActionWithType(action)) {
    // Si no es una acci√≥n v√°lida (por ejemplo, puede ser una funci√≥n o un promesa si usas otros middlewares como thunk),
    // simplemente la pasa al siguiente middleware o al reducer.
    return next(action);
  }

  // üí¨ Log de la acci√≥n recibida (opcional, √∫til para depuraci√≥n)
  console.log("[Middleware] Acci√≥n recibida:", action.type);

  // ‚úÖ Guardar token si la acci√≥n de login fue exitosa (fulfilled)
  // Comprueba si el tipo de acci√≥n coincide con el caso fulfilled de la acci√≥n 'login' (asumiendo que es una thunk)
  if (action.type === "auth/login/fulfilled") {
    // Accede al payload de la acci√≥n para obtener el token (asumiendo que el token est√° en action.payload.token)
    const token = action.payload?.token;
    // Si se encontr√≥ un token en el payload
    if (token) {
      // Guarda el token en el almacenamiento local del navegador
      localStorage.setItem("token", token);
      console.log("‚úÖ Token guardado en localStorage"); // Log de confirmaci√≥n
    }
  }

  // üßπ Limpiar token si la acci√≥n es la de 'logout'
  // Usa logout.match(action) que es una utilidad de Redux Toolkit para verificar si la acci√≥n coincide con la acci√≥n 'logout'
  if (logout.match(action)) {
    // Elimina el token del almacenamiento local
    localStorage.removeItem("token");
    console.log("üö™ Usuario cerr√≥ sesi√≥n. Token eliminado"); // Log de confirmaci√≥n
  }

  // üö® Mostrar error global si alguna acci√≥n fue rechazada (rejected)
  // isRejectedWithValue es una utilidad de Redux Toolkit que verifica si la acci√≥n fue rechazada Y tiene un payload de error
  if (isRejectedWithValue(action)) {
    console.warn("‚ö†Ô∏è Acci√≥n fallida:", action.type); // Advierte que una acci√≥n fall√≥
    // Muestra el payload del error o el mensaje de error, si existen
    console.warn("Mensaje:", action.payload || action.error?.message);
  }

  // Pasa la acci√≥n al siguiente middleware en la cadena o al reducer si es el √∫ltimo middleware
  return next(action);
};
